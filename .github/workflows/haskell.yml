name: Haskell CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  IMAGE_NAME: uow-util

jobs:
  build:
    strategy: 
      matrix:
        resolver: 
          - stack
          - stack-lts-14.12
          - stack-lts-13.26

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1  
    
    - name: Authenticate to package registry 
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
    
    - name: Install system dependencies 
      run: |
        sudo apt-get install libpcre3-dev

    - name: Install the Haskell Stack 
      run: |
        mkdir -p ~/.local/bin
        curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'

    - name: Cache .stack
      id: cache-stack
      uses: actions/cache@v2
      with:
        path: ~/.stack
        key: ${{ runner.os }}-${{ matrix.resolver }}-${{ hashFiles(format('{0}.yaml', matrix.resolver)) }}
        restore-keys: |
            ${{ runner.os }}-stack
            ${{ runner.os }}

    - name: Install GHC 
      run: |
        export PATH=$HOME/.local/bin:$PATH
        stack --stack-yaml=${{ matrix.resolver }}.yaml --no-terminal --install-ghc setup

    - name: Install dependencies
      run: |
        export PATH=$HOME/.local/bin:$PATH
        stack --stack-yaml=${{ matrix.resolver }}.yaml --no-terminal build --flag uow-apis:build-exe --only-dependencies --fast
        
    - name: Build 
      run: |
        export PATH=$HOME/.local/bin:$PATH
        stack --stack-yaml=${{ matrix.resolver }}.yaml --no-terminal build --flag uow-apis:build-exe --fast
        stack --stack-yaml=${{ matrix.resolver }}.yaml --no-terminal install --flag uow-apis:build-exe --fast --local-bin-path=${{ github.workspace }}/bin

    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: uow-util-${{ matrix.resolver }}
        path: ${{ github.workspace }}/bin/uow-util

    - name: Create release 
      id: create_release
      uses: release-drafter/release-drafter@v5
      if: ${{ matrix.resolver == 'stack' && github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release asset
      id: upload_release_asset 
      uses: actions/upload-release-asset@v1
      if: ${{ matrix.resolver == 'stack' && github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{ github.workspace }}/bin/uow-util
        asset_name: uow-util
        asset_content_type: application/octet-stream

    - name: Build Docker image
      run: docker build . --file .github/Dockerfile --tag $IMAGE_NAME:latest

    - name: Publish latest Docker image 
      run: |
        IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
        docker push $IMAGE_ID:latest
